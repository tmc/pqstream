# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pqstream.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from github.com.golang.protobuf.ptypes.struct import struct_pb2 as github_dot_com_dot_golang_dot_protobuf_dot_ptypes_dot_struct_dot_struct__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='pqstream.proto',
  package='pqs',
  syntax='proto3',
  serialized_pb=_b('\n\x0epqstream.proto\x12\x03pqs\x1a\x35github.com/golang/protobuf/ptypes/struct/struct.proto\"%\n\rListenRequest\x12\x14\n\x0ctable_regexp\x18\x01 \x01(\t\"\xa6\x01\n\x08RawEvent\x12\x0e\n\x06schema\x18\x01 \x01(\t\x12\r\n\x05table\x18\x02 \x01(\t\x12\x1a\n\x02op\x18\x03 \x01(\x0e\x32\x0e.pqs.Operation\x12\n\n\x02id\x18\x04 \x01(\t\x12(\n\x07payload\x18\x05 \x01(\x0b\x32\x17.google.protobuf.Struct\x12)\n\x08previous\x18\x06 \x01(\x0b\x32\x17.google.protobuf.Struct\"\xa2\x01\n\x05\x45vent\x12\x0e\n\x06schema\x18\x01 \x01(\t\x12\r\n\x05table\x18\x02 \x01(\t\x12\x1a\n\x02op\x18\x03 \x01(\x0e\x32\x0e.pqs.Operation\x12\n\n\x02id\x18\x04 \x01(\t\x12(\n\x07payload\x18\x05 \x01(\x0b\x32\x17.google.protobuf.Struct\x12(\n\x07\x63hanges\x18\x06 \x01(\x0b\x32\x17.google.protobuf.Struct*J\n\tOperation\x12\x0b\n\x07UNKNOWN\x10\x00\x12\n\n\x06INSERT\x10\x01\x12\n\n\x06UPDATE\x10\x02\x12\n\n\x06\x44\x45LETE\x10\x03\x12\x0c\n\x08TRUNCATE\x10\x04\x32\x38\n\x08PQStream\x12,\n\x06Listen\x12\x12.pqs.ListenRequest\x1a\n.pqs.Event\"\x00\x30\x01\x62\x06proto3')
  ,
  dependencies=[github_dot_com_dot_golang_dot_protobuf_dot_ptypes_dot_struct_dot_struct__pb2.DESCRIPTOR,])

_OPERATION = _descriptor.EnumDescriptor(
  name='Operation',
  full_name='pqs.Operation',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INSERT', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UPDATE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DELETE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRUNCATE', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=451,
  serialized_end=525,
)
_sym_db.RegisterEnumDescriptor(_OPERATION)

Operation = enum_type_wrapper.EnumTypeWrapper(_OPERATION)
UNKNOWN = 0
INSERT = 1
UPDATE = 2
DELETE = 3
TRUNCATE = 4



_LISTENREQUEST = _descriptor.Descriptor(
  name='ListenRequest',
  full_name='pqs.ListenRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='table_regexp', full_name='pqs.ListenRequest.table_regexp', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=78,
  serialized_end=115,
)


_RAWEVENT = _descriptor.Descriptor(
  name='RawEvent',
  full_name='pqs.RawEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='schema', full_name='pqs.RawEvent.schema', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='table', full_name='pqs.RawEvent.table', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='op', full_name='pqs.RawEvent.op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='pqs.RawEvent.id', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='payload', full_name='pqs.RawEvent.payload', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='previous', full_name='pqs.RawEvent.previous', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=118,
  serialized_end=284,
)


_EVENT = _descriptor.Descriptor(
  name='Event',
  full_name='pqs.Event',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='schema', full_name='pqs.Event.schema', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='table', full_name='pqs.Event.table', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='op', full_name='pqs.Event.op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='pqs.Event.id', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='payload', full_name='pqs.Event.payload', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='changes', full_name='pqs.Event.changes', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=287,
  serialized_end=449,
)

_RAWEVENT.fields_by_name['op'].enum_type = _OPERATION
_RAWEVENT.fields_by_name['payload'].message_type = github_dot_com_dot_golang_dot_protobuf_dot_ptypes_dot_struct_dot_struct__pb2._STRUCT
_RAWEVENT.fields_by_name['previous'].message_type = github_dot_com_dot_golang_dot_protobuf_dot_ptypes_dot_struct_dot_struct__pb2._STRUCT
_EVENT.fields_by_name['op'].enum_type = _OPERATION
_EVENT.fields_by_name['payload'].message_type = github_dot_com_dot_golang_dot_protobuf_dot_ptypes_dot_struct_dot_struct__pb2._STRUCT
_EVENT.fields_by_name['changes'].message_type = github_dot_com_dot_golang_dot_protobuf_dot_ptypes_dot_struct_dot_struct__pb2._STRUCT
DESCRIPTOR.message_types_by_name['ListenRequest'] = _LISTENREQUEST
DESCRIPTOR.message_types_by_name['RawEvent'] = _RAWEVENT
DESCRIPTOR.message_types_by_name['Event'] = _EVENT
DESCRIPTOR.enum_types_by_name['Operation'] = _OPERATION
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ListenRequest = _reflection.GeneratedProtocolMessageType('ListenRequest', (_message.Message,), dict(
  DESCRIPTOR = _LISTENREQUEST,
  __module__ = 'pqstream_pb2'
  # @@protoc_insertion_point(class_scope:pqs.ListenRequest)
  ))
_sym_db.RegisterMessage(ListenRequest)

RawEvent = _reflection.GeneratedProtocolMessageType('RawEvent', (_message.Message,), dict(
  DESCRIPTOR = _RAWEVENT,
  __module__ = 'pqstream_pb2'
  # @@protoc_insertion_point(class_scope:pqs.RawEvent)
  ))
_sym_db.RegisterMessage(RawEvent)

Event = _reflection.GeneratedProtocolMessageType('Event', (_message.Message,), dict(
  DESCRIPTOR = _EVENT,
  __module__ = 'pqstream_pb2'
  # @@protoc_insertion_point(class_scope:pqs.Event)
  ))
_sym_db.RegisterMessage(Event)



_PQSTREAM = _descriptor.ServiceDescriptor(
  name='PQStream',
  full_name='pqs.PQStream',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=527,
  serialized_end=583,
  methods=[
  _descriptor.MethodDescriptor(
    name='Listen',
    full_name='pqs.PQStream.Listen',
    index=0,
    containing_service=None,
    input_type=_LISTENREQUEST,
    output_type=_EVENT,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_PQSTREAM)

DESCRIPTOR.services_by_name['PQStream'] = _PQSTREAM

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PQStreamStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Listen = channel.unary_stream(
          '/pqs.PQStream/Listen',
          request_serializer=ListenRequest.SerializeToString,
          response_deserializer=Event.FromString,
          )


  class PQStreamServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def Listen(self, request, context):
      """Listen responds with a stream of database operations.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PQStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Listen': grpc.unary_stream_rpc_method_handler(
            servicer.Listen,
            request_deserializer=ListenRequest.FromString,
            response_serializer=Event.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'pqs.PQStream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPQStreamServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def Listen(self, request, context):
      """Listen responds with a stream of database operations.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPQStreamStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def Listen(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Listen responds with a stream of database operations.
      """
      raise NotImplementedError()


  def beta_create_PQStream_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('pqs.PQStream', 'Listen'): ListenRequest.FromString,
    }
    response_serializers = {
      ('pqs.PQStream', 'Listen'): Event.SerializeToString,
    }
    method_implementations = {
      ('pqs.PQStream', 'Listen'): face_utilities.unary_stream_inline(servicer.Listen),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PQStream_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('pqs.PQStream', 'Listen'): ListenRequest.SerializeToString,
    }
    response_deserializers = {
      ('pqs.PQStream', 'Listen'): Event.FromString,
    }
    cardinalities = {
      'Listen': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'pqs.PQStream', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
